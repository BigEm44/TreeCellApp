{"version":3,"sources":["components/SmallCellFirst.js","reducers/cellReducer.js","context/CellContext.js","components/SmallCellDetails.js","components/SmallCell.js","reducers/largeInnerReducer.js","context/LargeInnerContext.js","components/LargeInnerCellDetail.js","context/ModalContext.js","components/ModalForm.js","components/Modal.js","components/LargeCell.js","components/ModalTrigger.js","App.js","serviceWorker.js","index.js"],"names":["SmallCellFirst","useState","remove","setRemove","className","onClick","cellReducer","state","action","type","title","cell","id","uuidv4","filter","CellContext","createContext","CellContextProvider","props","useReducer","cells","dispatch","Provider","value","children","SmallCellDetail","useContext","SmallCell","map","SmallCellDetails","key","largeInnerReducer","innerTitle","innerCell","splice","LargeInnerContext","LargeInnerContextProvider","innerCells","dispatchLarge","LargeInnerCellDetail","ModalContext","ModalContextProvider","modal","setModal","largeInnerCellModal","setLargeInnerCellModal","openModal","closeModal","largeInnerCellModalisOpen","largeInnerCellModalisClose","ModalForm","setTitle","ReactDOM","createPortal","onSubmit","e","preventDefault","maxlength","placeholder","onChange","target","required","document","body","Modal","Fragment","LargeCell","ModalTrigger","App","Boolean","window","location","hostname","match","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.2314f4ee.chunk.js","sourcesContent":["import React, { useState } from 'react';\n\nconst SmallCellFirst = () => {\n  const [remove, setRemove] = useState(false);\n  const removeCell = () => setRemove(true);\n  return (\n    <div className={remove ? 'displayNone' : 'smallCellFirst'}>\n      <p className=\"lineText\">And</p>\n      <div className=\"lineVertical\"></div>\n      <div className=\"lineHorizontal\"></div>\n      <div className=\" cell cellBorder\">\n        <div className=\"title\">Reptile</div>\n        <div className=\"removeButton\" onClick={() => removeCell()}>\n          -\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default SmallCellFirst;\n","import { v4 as uuidv4 } from 'uuid';\n\nexport const cellReducer = (state, action) => {\n  switch (action.type) {\n    case 'ADD_CELL':\n      return [\n        ...state,\n        {\n          title: action.cell.title,\n          id: uuidv4()\n        }\n      ];\n    case 'REMOVE_CELL':\n      return state.filter(cell => cell.id !== action.id);\n    default:\n      return state;\n  }\n};\n","import React, { createContext, useReducer } from 'react';\nimport { cellReducer } from '../reducers/cellReducer';\n\nexport const CellContext = createContext();\n\nconst CellContextProvider = props => {\n  const [cells, dispatch] = useReducer(cellReducer, [\n    { title: 'Insects', id: 2 }\n  ]);\n  return (\n    <CellContext.Provider value={{ cells, dispatch }}>\n      {props.children}\n    </CellContext.Provider>\n  );\n};\n\nexport default CellContextProvider;\n","import React, { useContext } from 'react';\nimport { CellContext } from '../context/CellContext';\n\nconst SmallCellDetail = ({ cell }) => {\n  const { dispatch } = useContext(CellContext);\n  return (\n    <div className=\"smallCellDetail\">\n      <p className=\"lineText\">And</p>\n      <div className=\"lineVertical\"></div>\n      <div className=\"lineHorizontal\"></div>\n      <div className=\" cell cellBorder\">\n        <div className=\" title\">{cell.title}</div>\n        <div\n          className=\"removeButton\"\n          onClick={() => dispatch({ type: 'REMOVE_CELL', id: cell.id })}\n        >\n          -\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default SmallCellDetail;\n","import React, { useContext } from 'react';\nimport { CellContext } from '../context/CellContext';\nimport SmallCellDetails from './SmallCellDetails';\n\nconst SmallCell = () => {\n  const { cells } = useContext(CellContext);\n  return (\n    <div className=\"smallCell\">\n      {cells.map(cell => {\n        return <SmallCellDetails cell={cell} key={cell.id} />;\n      })}\n    </div>\n  );\n};\n\nexport default SmallCell;\n","import { v4 as uuidv4 } from 'uuid';\n\nexport const largeInnerReducer = (state, action) => {\n  switch (action.type) {\n    case 'ADD_INNERCELL':\n      return [...state, { innerTitle: action.innerCell.title, id: uuidv4() }];\n    case 'REMOVE_INNERCELL':\n      return state.filter(innerCell => innerCell.id !== action.id);\n    case 'REMOVE_ALLINNERCELLS':\n      return state.splice(0, 0);\n    default:\n      return state;\n  }\n};\n","import React, { createContext, useReducer } from 'react';\nimport { largeInnerReducer } from '../reducers/largeInnerReducer';\n\nexport const LargeInnerContext = createContext();\n\nconst LargeInnerContextProvider = props => {\n  const [innerCells, dispatchLarge] = useReducer(largeInnerReducer, [\n    { innerTitle: 'Mammal', id: 1 },\n    { innerTitle: 'Human', id: 2 },\n    { innerTitle: 'Elephant', id: 3 }\n  ]);\n  return (\n    <LargeInnerContext.Provider value={{ innerCells, dispatchLarge }}>\n      {props.children}\n    </LargeInnerContext.Provider>\n  );\n};\n\nexport default LargeInnerContextProvider;\n","import React, { useContext } from 'react';\nimport { LargeInnerContext } from '../context/LargeInnerContext';\n\nconst LargeInnerCellDetail = ({ innerCell }) => {\n  const { dispatchLarge } = useContext(LargeInnerContext);\n  return (\n    <div className=\"largeInnerCellDetail\">\n      <div className=\"lineVertical\" />\n      <div className=\"lineHorizontal\" />\n      <div className=\"innerCellContent innerCellStyle\">\n        <div className=\"cellContent\">{innerCell.innerTitle}</div>\n        <div\n          className=\"removeButton\"\n          onClick={() =>\n            dispatchLarge({ type: 'REMOVE_INNERCELL', id: innerCell.id })\n          }\n        >\n          -\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default LargeInnerCellDetail;\n","import React, { createContext, useState } from 'react';\n\nexport const ModalContext = createContext();\n\nconst ModalContextProvider = props => {\n  const [modal, setModal] = useState(false);\n  const [largeInnerCellModal, setLargeInnerCellModal] = useState(false);\n  const openModal = () => setModal(true);\n  const closeModal = () => setModal(false);\n  const largeInnerCellModalisOpen = () => setLargeInnerCellModal(true);\n  const largeInnerCellModalisClose = () => setLargeInnerCellModal(false);\n  return (\n    <ModalContext.Provider\n      value={{\n        modal,\n        largeInnerCellModal,\n        openModal,\n        closeModal,\n        largeInnerCellModalisOpen,\n        largeInnerCellModalisClose\n      }}\n    >\n      {props.children}\n    </ModalContext.Provider>\n  );\n};\n\nexport default ModalContextProvider;\n","import React, { useContext, useState } from 'react';\nimport ReactDOM from 'react-dom';\nimport { ModalContext } from '../context/ModalContext';\nimport { CellContext } from '../context/CellContext';\nimport { LargeInnerContext } from '../context/LargeInnerContext';\n\nconst ModalForm = () => {\n  const [title, setTitle] = useState('');\n  const { dispatch } = useContext(CellContext);\n  const { dispatchLarge } = useContext(LargeInnerContext);\n  const {\n    closeModal,\n    largeInnerCellModal,\n    largeInnerCellModalisClose\n  } = useContext(ModalContext);\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    dispatch({ type: 'ADD_CELL', cell: { title } });\n    setTitle('');\n    closeModal(largeInnerCellModalisClose());\n  };\n\n  const handleInnerSubmit = e => {\n    e.preventDefault();\n    dispatchLarge({ type: 'ADD_INNERCELL', innerCell: { title } });\n    setTitle('');\n    closeModal(largeInnerCellModalisClose());\n  };\n\n  return ReactDOM.createPortal(\n    <aside className=\"modalArea\">\n      <div className=\"closeButtonSection }\">\n        <p onClick={() => closeModal(largeInnerCellModalisClose())}>x</p>\n      </div>\n      <div className=\"modalContent\">\n        <h2>Enter cell title</h2>\n        <form onSubmit={handleSubmit}>\n          <input\n            type=\"text\"\n            maxlength=\"18\"\n            placeholder=\"cell title\"\n            value={title}\n            onChange={e => setTitle(e.target.value)}\n            required\n          />\n          {largeInnerCellModal ? (\n            <button onClick={handleInnerSubmit} type=\"submit\">\n              Add\n            </button>\n          ) : (\n            <input type=\"submit\" value=\"Add\" />\n          )}\n        </form>\n      </div>\n    </aside>,\n    document.body\n  );\n};\n\nexport default ModalForm;\n","import React, { useContext } from 'react';\nimport ModalForm from './ModalForm';\nimport { ModalContext } from '../context/ModalContext';\n\nconst Modal = () => {\n  const { modal } = useContext(ModalContext);\n  return (\n    <React.Fragment>\n      {modal ? <ModalForm /> : <React.Fragment />}\n    </React.Fragment>\n  );\n};\n\nexport default Modal;\n","import React, { useContext } from 'react';\nimport LargeInnerCellDetail from './LargeInnerCellDetail';\nimport Modal from './Modal';\nimport { LargeInnerContext } from '../context/LargeInnerContext';\nimport { ModalContext } from '../context/ModalContext';\n\nconst LargeCell = () => {\n  const { innerCells, dispatchLarge } = useContext(LargeInnerContext);\n  const { openModal, largeInnerCellModalisOpen } = useContext(ModalContext);\n  return (\n    <div className=\"largeCell\">\n      <p className=\"lineText\">And</p>\n      <div className=\"lineVertical\"></div>\n      <div className=\"lineHorizontal\"></div>\n      <div className=\"cellBorder\">\n        <div\n          className=\"removeButton deleteAllButton\"\n          onClick={() => dispatchLarge({ type: 'REMOVE_ALLINNERCELLS' })}\n        >\n          -\n        </div>\n        <div className=\"largeInnerCell\">\n          {innerCells.map(innerCell => {\n            return (\n              <LargeInnerCellDetail innerCell={innerCell} key={innerCell.id} />\n            );\n          })}\n          <Modal />\n          <div\n            onClick={() => openModal(largeInnerCellModalisOpen())}\n            className=\"addLargeInnerCell addCell\"\n          >\n            +\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default LargeCell;\n","import React, { useContext } from 'react';\nimport { ModalContext } from '../context/ModalContext';\n\nconst ModalTrigger = () => {\n  const { openModal } = useContext(ModalContext);\n  return (\n    <div onClick={() => openModal()} className=\"addCell\">\n      +\n    </div>\n  );\n};\n\nexport default ModalTrigger;\n","import React from 'react';\nimport SmallCellFirst from './components/SmallCellFirst';\nimport SmallCell from './components/SmallCell';\nimport LargeCell from './components/LargeCell';\nimport ModalTrigger from './components/ModalTrigger';\nimport CellContextProvider from './context/CellContext';\nimport ModalContextProvider from './context/ModalContext';\nimport LargeInnerContextProvider from './context/LargeInnerContext';\nimport './stylesheets/index.scss';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <ModalContextProvider>\n        <CellContextProvider>\n          <LargeInnerContextProvider>\n            <div className=\"wrapper\">\n              <h2>Animals</h2>\n              <SmallCellFirst />\n              <LargeCell />\n              <SmallCell />\n              <ModalTrigger />\n            </div>\n          </LargeInnerContextProvider>\n        </CellContextProvider>\n      </ModalContextProvider>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './stylesheets/index.scss';\n\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}